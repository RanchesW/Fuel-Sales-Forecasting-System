# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import pandas as pd
import logging
from prophet import Prophet
from sqlalchemy import create_engine, text
import sys
import pyodbc
import oracledb
import re
from datetime import datetime, timedelta
import numpy as np
from urllib.parse import quote_plus
import concurrent.futures  # –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Oracle –∫–ª–∏–µ–Ω—Ç–∞ (—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –ø–∞–ø–∫—É —Å instantclient)
oracledb.init_oracle_client(lib_dir=r"C:\instantclient_23_7")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

#######################################################################
# 0. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
#######################################################################
def create_robust_sql_connection(max_retries=3):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    driver = 'ODBC Driver 18 for SQL Server'
    host = ''
    port = ''
    database = ''
    username = ''
    password = ''

    # PyODBC connection string
    connection_string = (
        f"DRIVER={{{driver}}};"
        f"SERVER={host},{port};"  
        f"DATABASE={database};"
        f"UID={username};"
        f"PWD={password};"
        f"TrustServerCertificate=yes;"
        f"Connection Timeout=60;"
        f"Command Timeout=600;"
    )

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è SQLAlchemy
    password_encoded = quote_plus(password)
    username_encoded = quote_plus(username)
    driver_encoded = quote_plus(driver)
    
    # SQLAlchemy connection string (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    engine_string = (
        f"mssql+pyodbc://{username_encoded}:{password_encoded}@{host}:{port}/{database}"
        f"?driver={driver_encoded}&TrustServerCertificate=yes&timeout=60"
    )

    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server #{attempt + 1}")
            
            # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º PyODBC
            conn = pyodbc.connect(connection_string)
            print("‚úÖ PyODBC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º SQLAlchemy engine
            engine = create_engine(
                engine_string,
                pool_size=5,
                max_overflow=10,
                pool_timeout=60,
                pool_recycle=3600,
                connect_args={
                    "timeout": 60,
                    "autocommit": True
                }
            )
            
            # –¢–µ—Å—Ç SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            with engine.connect() as test_conn:
                result = test_conn.execute(text("SELECT 1 AS test"))
                test_result = result.fetchone()
                if test_result[0] != 1:
                    raise Exception("SQLAlchemy —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            
            print("‚úÖ SQLAlchemy –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server —É—Å–ø–µ—à–Ω–æ")
            return conn, engine, connection_string
            
        except Exception as e:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                if 'conn' in locals():
                    conn.close()
                if 'engine' in locals():
                    engine.dispose()
            except:
                pass
            
            if attempt < max_retries - 1:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                time.sleep(10)
            else:
                print("üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                print("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                try:
                    return create_alternative_connection()
                except Exception as alt_error:
                    print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {alt_error}")
                    raise

def create_alternative_connection():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π PyODBC"""
    driver = 'ODBC Driver 18 for SQL Server'
    host = ''
    port = ''
    database = ''
    username = ''
    password = ''

    print("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã connection string
    connection_strings = [
        # –í–∞—Ä–∏–∞–Ω—Ç 1: —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏
        (
            f"DRIVER={{{driver}}};"
            f"SERVER={host},{port};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"TrustServerCertificate=yes;"
            f"Encrypt=no;"
        ),
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –±–µ–∑ –ø–æ—Ä—Ç–∞
        (
            f"DRIVER={{{driver}}};"
            f"SERVER={host};"
            f"DATABASE={database};"
            f"UID={username};"
            f"PWD={password};"
            f"TrustServerCertificate=yes;"
            f"Encrypt=no;"
        ),
        # –í–∞—Ä–∏–∞–Ω—Ç 3: —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å
        (
            f"DRIVER={{{driver}}};"
            f"Server={host}\\SQLEXPRESS,{port};"
            f"Database={database};"
            f"Uid={username};"
            f"Pwd={password};"
            f"TrustServerCertificate=yes;"
        )
    ]
    
    for i, conn_str in enumerate(connection_strings, 1):
        try:
            print(f"   –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç {i}...")
            conn = pyodbc.connect(conn_str)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π engine —á–µ—Ä–µ–∑ create_engine —Å raw –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            def get_connection():
                return pyodbc.connect(conn_str)
            
            # –°–æ–∑–¥–∞–µ–º "–ø—Å–µ–≤–¥–æ-engine" –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class SimpleEngine:
                def __init__(self, connection_func):
                    self.get_conn = connection_func
                    
                def connect(self):
                    return self.get_conn()
                    
                def execute(self, query):
                    conn = self.get_conn()
                    cursor = conn.cursor()
                    cursor.execute(str(query))
                    result = cursor.fetchall()
                    cursor.close()
                    conn.close()
                    return result
                    
                def dispose(self):
                    pass
                    
                def begin(self):
                    return self.connect()
            
            engine = SimpleEngine(get_connection)
            
            print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–≤–∞—Ä–∏–∞–Ω—Ç {i}) —É—Å–ø–µ—à–Ω–æ!")
            return conn, engine, conn_str
            
        except Exception as e:
            print(f"   ‚ùå –í–∞—Ä–∏–∞–Ω—Ç {i} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            continue
    
    raise Exception("–í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")

def execute_query_with_retry(query, engine, connection_string, username, password, host, database, driver, max_retries=3):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ–π engine, –∏—Å–ø–æ–ª—å–∑—É–µ–º PyODBC –Ω–∞–ø—Ä—è–º—É—é
            if hasattr(engine, 'get_conn'):
                conn = engine.get_conn()
                df = pd.read_sql_query(query, con=conn)
                conn.close()
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SQLAlchemy
                df = pd.read_sql_query(query, con=engine)
            
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ {len(df):,} —Å—Ç—Ä–æ–∫")
            return df
            
        except Exception as e:
            print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            if attempt < max_retries - 1:
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                time.sleep(15)
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server...")
                try:
                    if hasattr(engine, 'dispose'):
                        engine.dispose()
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    new_conn, engine, _ = create_robust_sql_connection(max_retries=1)
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ")
                        
                except Exception as reconnect_error:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {reconnect_error}")
            else:
                print("üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                raise

#######################################################################
# 1. –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –î–ê–¢–´ –ü–†–û–ì–ù–û–ó–ê
#######################################################################
def select_forecast_date():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    """
    print("\n" + "="*50)
    print("–í–´–ë–û–† –î–ê–¢–´ –ü–†–û–ì–ù–û–ó–ê")
    print("="*50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.now()
    print(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d (%A)')}")
    
    while True:
        print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:")
        print("1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
        print("2. –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é")
        print("3. –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ").strip()
        
        if choice == "1":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            selected_date = current_date
            break
            
        elif choice == "2":
            # –í–≤–æ–¥ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
            print("\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-15):")
            date_input = input("–î–∞—Ç–∞: ").strip()
            
            try:
                selected_date = datetime.strptime(date_input, "%Y-%m-%d")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É
                if selected_date > current_date:
                    print("‚ö†Ô∏è  –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±—É–¥—É—â—É—é –¥–∞—Ç—É!")
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
                if selected_date < current_date - timedelta(days=30):
                    confirm = input("‚ö†Ô∏è  –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
                    if confirm != 'y':
                        continue
                
                break
                
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
                continue
                
        elif choice == "3":
            # –í—ã–±–æ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π
            print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:")
            for i in range(7):
                date_option = current_date - timedelta(days=i)
                weekday_ru = {
                    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥",
                    4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                }
                print(f"{i+1}. {date_option.strftime('%Y-%m-%d')} ({weekday_ru[date_option.weekday()]})")
            
            try:
                day_choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å (1-7): ").strip())
                if 1 <= day_choice <= 7:
                    selected_date = current_date - timedelta(days=day_choice-1)
                    break
                else:
                    print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7")
                    continue
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                continue
        else:
            print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ—Ç 1 –¥–æ 3")
            continue
    
    return selected_date

#######################################################################
# 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQL Server —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
#######################################################################
print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQL Server...")
try:
    conn, engine, connection_string = create_robust_sql_connection()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è retry —Ñ—É–Ω–∫—Ü–∏–π
    driver = 'ODBC Driver 18 for SQL Server'
    host = '10.10.120.6'
    port = '1433'
    database = 'eho_export2acc'
    username = 'powerbi'
    password = 'De$!gn2025_@'
    driver_encoded = driver
    
except Exception as e:
    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ SQL Server: {e}")
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ SQL Server: {e}")
    sys.exit(1)

#######################################################################
# 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
#######################################################################
# –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞
forecast_datetime = select_forecast_date()
FORECAST_DATE = forecast_datetime.strftime("%Y-%m-%d")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø—è—Ç–Ω–∏—Ü–µ–π (–ø—è—Ç–Ω–∏—Ü–∞ –∏–º–µ–µ—Ç weekday=4 –≤ Python)
IS_FRIDAY = forecast_datetime.weekday() == 4

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
if IS_FRIDAY:
    FORECAST_HOURS = 71  # 3 –¥–Ω—è (72 —á–∞—Å–∞ –º–∏–Ω—É—Å 1)
    forecast_period = "3 –¥–Ω—è (71 —á–∞—Å)"
else:
    FORECAST_HOURS = 47  # 2 –¥–Ω—è (48 —á–∞—Å–æ–≤ –º–∏–Ω—É—Å 1)
    forecast_period = "2 –¥–Ω—è (47 —á–∞—Å–æ–≤)"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
print("\n" + "="*50)
print("–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–ì–ù–û–ó–ê")
print("="*50)
print(f"–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {FORECAST_DATE}")
print(f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][forecast_datetime.weekday()]}")
print(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_period}")
print(f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_datetime.strftime('%Y-%m-%d %H:%M')} - {(forecast_datetime + timedelta(hours=FORECAST_HOURS)).strftime('%Y-%m-%d %H:%M')}")
print("="*50)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏? (y/n): ").strip().lower()
if confirm != 'y':
    print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    sys.exit(0)

#######################################################################
# 4. –ß—Ç–µ–Ω–∏–µ CSV —Å –º—ë—Ä—Ç–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
#######################################################################
print("üìÑ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...")
try:
    deadstock_data = pd.read_csv('deadstock_info_new.csv')

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –Ω—É–∂–¥–∞–º–∏
    deadstock_data.rename(columns={
        'Gas_Station_Name': 'Gas_Station_Name',
        'City': 'City',
        'Branch': 'Branch',
        'ObjectCode': 'OBJECTCODE',
        'Tank_Number': 'Tank_Number',
        'Deadstock_Level': 'Level_cm',
        'Deadstock_Volume': 'Volume_liters',
        'Max_Level': 'Max_Level',
        'Max_Volume': 'Max_Volume'
    }, inplace=True)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–µ –ª–æ–∫–∞—Ü–∏–∏: –ê—Å—Ç–∞–Ω–∞ –∏ –í–ö–û
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–µ–∏—Ö –ª–æ–∫–∞—Ü–∏–π
    filtered_data = pd.DataFrame()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ—Ä–æ–¥—É
    city_data = deadstock_data[deadstock_data['City'] == "–ê—Å—Ç–∞–Ω–∞"].copy()
    if not city_data.empty:
        filtered_data = pd.concat([filtered_data, city_data])
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ê—Å—Ç–∞–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: {len(city_data)}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–µ—Ç–∫–µ –í–ö–û
    branch_data = deadstock_data[deadstock_data['Branch'] == "–í–ö–û"].copy()
    if not branch_data.empty:
        filtered_data = pd.concat([filtered_data, branch_data])
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ç–∫–∏ –í–ö–û –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫: {len(branch_data)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if filtered_data.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ê—Å—Ç–∞–Ω–∞ –∏–ª–∏ –≤–µ—Ç–∫–∏ –í–ö–û –≤ CSV. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç.")
        sys.exit(1)

    # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    city_data = filtered_data
    
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
    sys.exit(1)

#######################################################################
# 5. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Oracle –∏ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ê–ó–°
#######################################################################
print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Oracle...")
oracle_username = "alikhan"
oracle_password = "C0n$ul25"
oracle_host = "10.10.120.96"
oracle_port = "1521"
oracle_service_name = "ORCL"

oracle_password_encoded = quote_plus(oracle_password)
oracle_connection_string = (
    f"oracle+oracledb://{oracle_username}:{oracle_password_encoded}"
    f"@{oracle_host}:{oracle_port}/?service_name={oracle_service_name}"
)

try:
    oracle_engine = create_engine(oracle_connection_string)
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Oracle.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SQLAlchemy –¥–≤–∏–∂–∫–∞ –¥–ª—è Oracle: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SQLAlchemy –¥–≤–∏–∂–∫–∞ –¥–ª—è Oracle: {e}")
    sys.exit(1)

# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö OBJECTCODE –∏–∑ CSV
unique_objcodes = city_data['OBJECTCODE'].unique().tolist()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ IN(...)
def prepare_in_clause(values, is_string=False):
    if is_string:
        return ','.join(f"'{v}'" for v in values)
    else:
        return ','.join(str(v) for v in values)

objcodes_str = prepare_in_clause(unique_objcodes, is_string=True)

# –ó–∞–ø—Ä–æ—Å –∫ Oracle –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ê–ó–°
status_query = f"""
SELECT
    t.OBJECTCODE,
    t.STATUS
FROM GS.AZS t
WHERE t.OBJECTCODE IN ({objcodes_str})
"""

try:
    status_df = pd.read_sql(status_query, con=oracle_engine)
    status_df.columns = [col.upper().strip() for col in status_df.columns]
    print("‚úÖ –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ê–ó–° –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Oracle.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Oracle: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ Oracle: {e}")
    sys.exit(1)

if status_df.empty:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏–∫–∞–∫–∏—Ö –ê–ó–° –≤ Oracle –ø–æ —Ç–µ–º OBJECTCODE, —á—Ç–æ –µ—Å—Ç—å –≤ CSV.")
    sys.exit(1)

#######################################################################
# 6. –ú–µ—Ä–¥–∂–∏–º CSV-–¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ STATUS=1
#######################################################################
print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
city_data = city_data.merge(status_df, on='OBJECTCODE', how='left')

# –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å = 1 (in progress)
city_data = city_data[city_data['STATUS'] == 1]

if city_data.empty:
    print("‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ STATUS=1 –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–∞–Ω–Ω—ã—Ö. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç.")
    sys.exit(1)

#######################################################################
# 7. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ TANK, FuelType)
#######################################################################
def extract_tank_and_fuel(tank_value):
    # –ò—â–µ–º "–†–µ–∑–µ—Ä–≤—É–∞—Ä + —á–∏—Å–ª–æ"
    tank_match = re.search(r'–†–µ–∑–µ—Ä–≤—É–∞—Ä[–∞—É]?\s*(\d+)', str(tank_value), re.IGNORECASE)
    if (tank_match):
        tank_number = int(tank_match.group(1))
    else:
        tank_number = None

    # –ò—â–µ–º —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
    fuel_match = re.search(
        r'(–ê–ò-80|–ê–ò-92|–ê–ò-95|–ê–ò-98|–î–¢-–ó-32|–î–¢-–ó-25|–î–¢-–õ|–î–¢–ó|–î–¢|–°–£–ì|–ê–ò-95-IMPORT)',
        str(tank_value),
        re.IGNORECASE
    )
    if fuel_match:
        fuel_name = fuel_match.group(1).upper()
    else:
        fuel_name = None

    return pd.Series({'TANK': tank_number, 'FuelType': fuel_name})

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ –ø–æ–ª—é 'Tank_Number'
city_data[['TANK', 'FuelType']] = city_data['Tank_Number'].apply(extract_tank_and_fuel)

# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
city_data.dropna(subset=['TANK', 'FuelType'], inplace=True)

# –ü—Ä–∏–≤–æ–¥–∏–º TANK –∫ int
city_data['TANK'] = city_data['TANK'].astype(int)

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è FuelType -> GASNUM
fuel_mapping = {
    '–ê–ò-80': '3300000000',
    '–ê–ò-92': '3300000002',
    '–ê–ò-95': '3300000005',
    '–ê–ò-98': '3300000008',
    '–î–¢': '3300000010',
    '–î–¢-–õ': '3300000010',
    '–î–¢-3-25': '3300000029',
    '–î–¢-3-32': '3300000038',
    '–°–£–ì': '3400000000',
    '–ê–ò-95-IMPORT': '3300000095',
    '–î–¢–ó': '3300000010'
}

print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(city_data)}")

# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
unique_combinations = city_data[['OBJECTCODE', 'TANK', 'FuelType']].drop_duplicates()
print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(unique_combinations)}")

#######################################################################
# 8. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —á—Ç–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ ord_salesbyhour (SQL Server)
#######################################################################
# –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (OBJECTCODE, GASNUM, TANK) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
params_list = []
for _, row in unique_combinations.iterrows():
    object_code = row['OBJECTCODE']
    tank_number = row['TANK']
    fuel_name   = row['FuelType']
    gasnum      = fuel_mapping.get(fuel_name)
    if gasnum:
        params_list.append((object_code, gasnum, tank_number))

object_codes = list({p[0] for p in params_list})
gasnums      = list({p[1] for p in params_list})
tanks        = list({p[2] for p in params_list})

object_codes_str = prepare_in_clause(object_codes, is_string=True)
gasnums_str      = prepare_in_clause(gasnums,      is_string=True)
tanks_str        = prepare_in_clause(tanks,        is_string=False)

# –ó–∞–ø—Ä–æ—Å –∫ ord_salesbyhour
query_sales = f"""
SELECT
    CAST(r_day AS DATE) AS DATE,
    r_hour AS R_HOUR,
    objectcode AS OBJECTCODE,
    gasnum AS GASNUM,
    tank AS TANK,
    ISNULL(RECEIPTS_VOLUME, 0) AS RECEIPTS_VOLUME
FROM ord_salesbyhour
WHERE
    objectcode IN ({object_codes_str})
    AND gasnum IN ({gasnums_str})
    AND tank IN ({tanks_str})
"""

print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è {len(object_codes)} –ê–ó–°, {len(gasnums)} –≤–∏–¥–æ–≤ —Ç–æ–ø–ª–∏–≤–∞, {len(tanks)} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤...")

try:
    df_all = execute_query_with_retry(
        query_sales, 
        engine, 
        connection_string, 
        username, 
        password, 
        host, 
        database, 
        driver, 
        max_retries=5
    )
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏–∑ ord_salesbyhour —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df_all):,} –∑–∞–ø–∏—Å–µ–π")
except Exception as e:
    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ ord_salesbyhour: {e}")
    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ ord_salesbyhour: {e}")
    sys.exit(1)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ DATE + R_HOUR -> datetime
df_all['DATE'] = pd.to_datetime(df_all['DATE'], errors='coerce')
df_all.loc[df_all['R_HOUR'] == 24, 'R_HOUR'] = 0
df_all.loc[df_all['R_HOUR'] == 0, 'DATE'] = df_all['DATE'] + pd.Timedelta(days=1)

df_all['ds'] = pd.to_datetime(
    df_all['DATE'].dt.strftime('%Y-%m-%d') + ' ' +
    df_all['R_HOUR'].astype(str) + ':00:00'
)
df_all['weekday'] = df_all['ds'].dt.weekday
df_all['GASNUM']  = df_all['GASNUM'].astype(str)

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º
grouped = df_all.groupby(['OBJECTCODE', 'TANK', 'GASNUM'])

print(f"üìà –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü–µ—Ä–∏–æ–¥: {df_all['ds'].min()} - {df_all['ds'].max()}")

#######################################################################
# 9. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –æ–±—ä—ë–º–æ–≤ –∏–∑ Oracle (BI.tigmeasurements)
#######################################################################
print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –æ–±—ä–µ–º–æ–≤ –∏–∑ Oracle...")
oracle_query_current = f"""
SELECT t.OBJECTCODE, t.TANK, t.GASNUM, t.VOLUME
FROM BI.tigmeasurements t
WHERE t.ID IN (
    SELECT MAX(ID)
    FROM BI.tigmeasurements
    WHERE TRUNC(POSTIMESTAMP) = TO_DATE('{FORECAST_DATE}', 'YYYY-MM-DD')
    GROUP BY OBJECTCODE, TANK, GASNUM
)
AND t.OBJECTCODE IN ({object_codes_str})
AND t.TANK IN ({tanks_str})
AND t.GASNUM IN ({gasnums_str})
"""

try:
    oracle_df = pd.read_sql(oracle_query_current, con=oracle_engine)
    print(f"‚úÖ –¢–µ–∫—É—â–∏–µ –æ–±—ä–µ–º—ã –∏–∑ BI.tigmeasurements –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(oracle_df)} –∑–∞–ø–∏—Å–µ–π")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –æ–±—ä–µ–º–æ–≤ –∏–∑ Oracle: {e}")
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –æ–±—ä–µ–º–æ–≤ –∏–∑ Oracle: {e}")
    sys.exit(1)

# –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
oracle_df.columns = [col.upper() for col in oracle_df.columns]
oracle_df['GASNUM'] = oracle_df['GASNUM'].astype(str)

#######################################################################
# 10. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (Prophet)
#######################################################################
def find_similar_days(target_weekday, target_hour, data, window_size=7):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –¥–Ω–µ–π (weekday + hour) –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö."""
    similar_days = data[
        (data['weekday'] == target_weekday) &
        (data['ds'].dt.hour == target_hour)
    ]
    if not similar_days.empty:
        rolling_mean = (similar_days['RECEIPTS_VOLUME']
                        .rolling(window=window_size, min_periods=1)
                        .mean()
                        .iloc[-1])
    else:
        rolling_mean = data['RECEIPTS_VOLUME'].mean()
    return rolling_mean

def process_combination(group_key):
    object_code, tank_number, gasnum_str = group_key
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ GASNUM
    possible_fuels = [k for k, v in fuel_mapping.items() if v == gasnum_str]
    if not possible_fuels:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–¥ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è GASNUM {gasnum_str}")
        return None
        
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –≤ city_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
    dead_stock_row = None
    for fuel_name in possible_fuels:
        temp_row = city_data[
            (city_data['OBJECTCODE'] == object_code) &
            (city_data['TANK'] == tank_number) &
            (city_data['FuelType'] == fuel_name)
        ]
        if not temp_row.empty:
            dead_stock_row = temp_row
            break
            
    if dead_stock_row is None or dead_stock_row.empty:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º—ë—Ä—Ç–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è OBJECTCODE={object_code}, TANK={tank_number}, –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–ø–ª–∏–≤–∞: {possible_fuels}")
        return None

    # –ü–æ–ª—É—á–∏–º ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ¬ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    fuel_name = None
    for k, v in fuel_mapping.items():
        if v == gasnum_str:
            fuel_name = k
            break

    if not fuel_name:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω FuelType –¥–ª—è GASNUM={gasnum_str}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return None

    print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: OBJECTCODE={object_code}, TANK={tank_number}, Fuel={fuel_name}")

    # –ë–µ—Ä—ë–º —Å—Ç—Ä–æ–∫—É –∏–∑ city_data, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –º—ë—Ä—Ç–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
    dead_row = city_data[
        (city_data['OBJECTCODE'] == object_code) &
        (city_data['TANK'] == tank_number) &
        (city_data['FuelType'] == fuel_name)
    ]
    if dead_row.empty:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º—ë—Ä—Ç–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ CSV –¥–ª—è —ç—Ç–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.")
        return None

    dead_stock = dead_row['Volume_liters'].iloc[0]
    print(f"üìç –ú—ë—Ä—Ç–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {dead_stock}")

    # –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º –∏–∑ oracle_df
    current_volume_row = oracle_df[
        (oracle_df['OBJECTCODE'] == object_code) &
        (oracle_df['TANK'] == tank_number) &
        (oracle_df['GASNUM'] == gasnum_str)
    ]
    if current_volume_row.empty:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–µ–≥–æ –æ–±—ä—ë–º–∞, –±–µ—Ä—ë–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π (fallback)
        fallback_query = f"""
        SELECT OBJECTCODE, TANK, GASNUM, AVG(VOLUME) AS VOLUME
        FROM BI.tigmeasurements
        WHERE 
            POSTIMESTAMP < TO_DATE('{FORECAST_DATE} 23:59:59','YYYY-MM-DD HH24:MI:SS')
            AND TRUNC(POSTIMESTAMP) >= TO_DATE('{FORECAST_DATE}','YYYY-MM-DD') - 30
            AND OBJECTCODE='{object_code}'
            AND TANK={tank_number}
            AND GASNUM='{gasnum_str}'
        GROUP BY OBJECTCODE, TANK, GASNUM
        """
        try:
            fallback_df = pd.read_sql(fallback_query, con=oracle_engine)
            if not fallback_df.empty:
                initial_volume = fallback_df['VOLUME'].iloc[0]
                print(f"‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π: {initial_volume}")
            else:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä—ë–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ fallback –∫ Oracle: {e}")
            return None
    else:
        initial_volume = current_volume_row['VOLUME'].iloc[0]
        print(f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {initial_volume}")

    # –ó–∞–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    df_temp = grouped.get_group((object_code, tank_number, gasnum_str)).copy()
    # –°—É–º–º–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É —á–∞—Å—É
    df_temp = df_temp.groupby('ds', as_index=False).agg({
        'RECEIPTS_VOLUME': 'sum', 
        'weekday': 'first'
    })

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π —á–∞—Å–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å
    df_temp = df_temp.set_index('ds')
    start_date = df_temp.index.min().normalize()
    end_date = df_temp.index.max().normalize() + pd.Timedelta(days=1)
    full_index = pd.date_range(start=start_date, end=end_date, freq='h')

    # –†–µ—Å–µ–º–ø–ª–∏–º
    df_temp = df_temp.reindex(full_index).reset_index()
    df_temp.rename(columns={'index': 'ds'}, inplace=True)
    df_temp['weekday'] = df_temp['weekday'].fillna(df_temp['ds'].dt.weekday)
    df_temp.set_index('ds', inplace=True)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    if df_temp['RECEIPTS_VOLUME'].isnull().any():
        df_temp['RECEIPTS_VOLUME'] = df_temp['RECEIPTS_VOLUME'].interpolate(method='time')
        df_temp['RECEIPTS_VOLUME'] = df_temp['RECEIPTS_VOLUME'].bfill().ffill()

    df_temp.reset_index(inplace=True)
    forecast_date_cutoff = pd.to_datetime(f"{FORECAST_DATE} 00:00:00")
    historical_df = df_temp[df_temp['ds'] < forecast_date_cutoff]

    prophet_df = historical_df[['ds', 'RECEIPTS_VOLUME']].rename(columns={'RECEIPTS_VOLUME': 'y'})
    prophet_df = prophet_df[prophet_df['y'] >= 0]

    if len(prophet_df) < 24:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Prophet.")
        return None

    # –°–æ–∑–¥–∞—ë–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model = Prophet(
        seasonality_mode='additive',
        yearly_seasonality=False,
        weekly_seasonality=False,
        daily_seasonality=False,
        changepoint_prior_scale=0.05,
        seasonality_prior_scale=10.0
    )
    model.add_seasonality(name='weekly', period=7, fourier_order=3)
    model.add_seasonality(name='daily', period=1, fourier_order=5)
    model.add_seasonality(name='hourly', period=24, fourier_order=15)

    try:
        model.fit(prophet_df)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Prophet: {e}")
        return None

    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ FORECAST_HOURS —á–∞—Å–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏)
    forecast_start_date = pd.to_datetime(f"{FORECAST_DATE} 00:00:00")
    forecast_end_date   = forecast_start_date + pd.Timedelta(hours=FORECAST_HOURS)
    future_dates        = pd.date_range(start=forecast_start_date, end=forecast_end_date, freq='h')

    future_df = pd.DataFrame({'ds': future_dates})
    forecast = model.predict(future_df)[['ds','yhat']]
    forecast['yhat'] = forecast['yhat'].clip(lower=0)

    # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
    forecast['weekday'] = forecast['ds'].dt.weekday
    forecast['hour']    = forecast['ds'].dt.hour
    forecast['rolling_mean'] = forecast.apply(
        lambda row: find_similar_days(row['weekday'], row['hour'], historical_df),
        axis=1
    )

    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –≤ 20% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ Rolling Mean:
    min_fraction = 0.2
    forecast['combined_forecast'] = 0.3 * forecast['rolling_mean'] + 0.7 * forecast['yhat']

    # –ü–æ—Å—á–∏—Ç–∞–µ–º –Ω–µ–∫–∏–π –ø–æ—Ä–æ–≥:
    forecast['min_threshold'] = forecast['rolling_mean'] * min_fraction
    forecast['combined_forecast'] = forecast.apply(
        lambda row: max(row['combined_forecast'], row['min_threshold']),
        axis=1
    )

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —É–º–Ω–æ–∂–∞–µ–º –¥–∞–ª—å—à–µ
    forecast['combined_forecast'] = forecast['combined_forecast'] * 1.65

    # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è {object_code}, tank={tank_number}, fuel={fuel_name}:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(historical_df)}")

    # –ü–æ—Å–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ Prophet –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
    print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ Prophet:")
    print(f"   Min yhat: {forecast['yhat'].min():.2f}")
    print(f"   Max yhat: {forecast['yhat'].max():.2f}")
    print(f"   Mean yhat: {forecast['yhat'].mean():.2f}")

    # –ü–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ rolling_mean –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
    print(f"üìâ –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ:")
    print(f"   Min rolling_mean: {forecast['rolling_mean'].min():.2f}")
    print(f"   Max rolling_mean: {forecast['rolling_mean'].max():.2f}")
    print(f"   Mean rolling_mean: {forecast['rolling_mean'].mean():.2f}")

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç combined_forecast —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    forecast['combined_forecast'] = 0.3 * forecast['rolling_mean'] + 0.7 * forecast['yhat']
    
    # –ï—Å–ª–∏ combined_forecast —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º rolling_mean
    zero_forecasts = forecast['combined_forecast'] == 0
    if zero_forecasts.any():
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω—É–ª–µ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã! –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ rolling_mean")
        forecast.loc[zero_forecasts, 'combined_forecast'] = forecast.loc[zero_forecasts, 'rolling_mean']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑:")
    print(f"   Min combined_forecast: {forecast['combined_forecast'].min():.2f}")
    print(f"   Max combined_forecast: {forecast['combined_forecast'].max():.2f}")
    print(f"   Mean combined_forecast: {forecast['combined_forecast'].mean():.2f}")

    # –î–æ–±–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    min_acceptable_forecast = forecast['rolling_mean'].mean() * 0.1  # 10% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    forecast['combined_forecast'] = forecast['combined_forecast'].clip(lower=min_acceptable_forecast)

    # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞
    forecast['cumulative_sales'] = np.cumsum(forecast['combined_forecast'])
    forecast['current_volume']   = initial_volume - forecast['cumulative_sales']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –º—ë—Ä—Ç–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
    below_dead = forecast[forecast['current_volume'] <= dead_stock]
    if not below_dead.empty:
        first_reach = below_dead.iloc[0]
        deadstock_date = first_reach['ds']
        print(f"‚ö†Ô∏è Deadstock –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {deadstock_date}")
    else:
        deadstock_date = None
        print(f"‚úÖ Deadstock –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ {FORECAST_HOURS+1} —á–∞—Å–æ–≤.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    forecast['objectcode'] = object_code
    forecast['gasnum']     = gasnum_str
    forecast['tank']       = tank_number
    forecast['date_time']  = forecast['ds']
    forecast['forecast_volume_sales'] = forecast['combined_forecast']
    forecast['date_time_deadstock']   = deadstock_date
    forecast['forecast_current_volume'] = forecast['current_volume']

    insert_df = forecast[[
        'objectcode','gasnum','tank','date_time',
        'forecast_volume_sales','date_time_deadstock','forecast_current_volume'
    ]]
    return insert_df


#######################################################################
# 11. –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è + –≤—Å—Ç–∞–≤–∫–∞ –≤ ord_forecast
#######################################################################
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {df_all['ds'].min()}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {df_all['ds'].max()}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {df_all['ds'].dt.date.nunique()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    last_month = pd.to_datetime(FORECAST_DATE) - pd.Timedelta(days=30)
    recent_data = df_all[df_all['ds'] >= last_month]
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(recent_data):,}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {recent_data['RECEIPTS_VOLUME'].mean():.2f}")
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(grouped.groups)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π...")
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (OBJECTCODE, TANK, GASNUM)
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        results = list(executor.map(process_combination, grouped.groups.keys()))

    insert_dfs = [df for df in results if df is not None]
    if not insert_dfs:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ord_forecast.")
    else:
        final_insert_df = pd.concat(insert_dfs, ignore_index=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        forecast_date    = pd.to_datetime(FORECAST_DATE)
        forecast_start   = forecast_date.strftime('%Y-%m-%d 00:00:00')
        forecast_end     = (forecast_date + pd.Timedelta(hours=FORECAST_HOURS)).strftime('%Y-%m-%d %H:%M:%S')

        print(f"\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ ord_forecast...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ ord_forecast
        delete_query = f"""
        DELETE FROM ord_forecast
        WHERE
            objectcode IN ({object_codes_str})
            AND gasnum IN ({gasnums_str})
            AND tank IN ({tanks_str})
            AND date_time BETWEEN '{forecast_start}' AND '{forecast_end}'
        """
        
        try:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ–π engine, –∏—Å–ø–æ–ª—å–∑—É–µ–º PyODBC
            if hasattr(engine, 'get_conn'):
                conn_temp = engine.get_conn()
                cursor = conn_temp.cursor()
                cursor.execute(delete_query)
                row_count = cursor.rowcount
                conn_temp.commit()
                cursor.close()
                conn_temp.close()
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {row_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ord_forecast.")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SQLAlchemy
                with engine.begin() as connection:
                    result = connection.execute(text(delete_query))
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.rowcount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ord_forecast.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ord_forecast: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ ord_forecast: {e}")
            sys.exit(1)

        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ ord_forecast...")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å retry
        max_retries = 3
        for attempt in range(max_retries):
            try:
                # –ï—Å–ª–∏ —É –Ω–∞—Å –ø—Ä–æ—Å—Ç–æ–π engine, –∏—Å–ø–æ–ª—å–∑—É–µ–º PyODBC
                if hasattr(engine, 'get_conn'):
                    conn_temp = engine.get_conn()
                    final_insert_df.to_sql('ord_forecast', con=conn_temp, if_exists='append', index=False)
                    conn_temp.close()
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SQLAlchemy
                    final_insert_df.to_sql('ord_forecast', con=engine, if_exists='append', index=False)
                    
                print(f"\n‚úÖ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ ord_forecast!")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(final_insert_df):,}")
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {forecast_start} - {forecast_end}")
                break
                
            except Exception as e:
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –≤—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(10)
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ ord_forecast: {e}")
                    print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ ord_forecast: {e}")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç—ã
    try:
        if hasattr(oracle_engine, 'dispose'):
            oracle_engine.dispose()
        if hasattr(engine, 'dispose'):
            engine.dispose()
        conn.close()
        print("\nüîí –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    print("\nüéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
